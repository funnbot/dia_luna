{
  "[csharp]": {
    "editor.codeActionsOnSave": {
      "source.addMissingImports": "explicit",
      "source.fixAll": "explicit",
      "source.organizeImports": "explicit"
    },
    "editor.defaultFormatter": "csharpier.csharpier-vscode",
    "editor.formatOnPaste": true,
    "editor.formatOnSave": false,
    "editor.formatOnType": true
  },
  // CSharp Settings
  "csharp.debug.justMyCode": false,
  "csharp.debug.suppressJITOptimizations": true,
  "csharp.format.enable": false,
  "csharp.inlayHints.enableInlayHintsForImplicitObjectCreation": true,
  "csharp.inlayHints.enableInlayHintsForImplicitVariableTypes": true,
  "csharp.semanticHighlighting.enabled": true,
  "csharpier.diagnosticsLevel": "3",
  "dotnet.autoInsert.enableAutoInsert": true,
  "dotnet.backgroundAnalysis.analyzerDiagnosticsScope": "fullSolution",
  "dotnet.backgroundAnalysis.compilerDiagnosticsScope": "fullSolution",
  "dotnet.codeLens.enableReferencesCodeLens": false,
  "dotnet.completion.showCompletionItemsFromUnimportedNamespaces": true,
  "dotnet.completion.triggerCompletionInArgumentLists": true,
  "dotnet.defaultSolution": "DiaLuna.sln",
  "dotnet.enableXamlTools": false,
  "dotnet.formatting.organizeImportsOnFormat": true,
  "dotnet.inlayHints.enableInlayHintsForObjectCreationParameters": true,
  "dotnet.navigation.navigateToDecompiledSources": true,
  "dotnet.navigation.navigateToSourceLinkAndEmbeddedSources": true,
  "dotnet.preferCSharpExtension": true,
  "dotnet.server.useOmnisharp": false, // You decide
  "dotnet.typeMembers.propertyGenerationBehavior": "preferAutoProperties",
  "dotnetAcquisitionExtension.enableTelemetry": false,
  //
  // Editor Settings
  "editor.rulers": [
    80
  ],
  "editor.semanticHighlighting.enabled": true,
  "editor.snippetSuggestions": "bottom",
  "editor.suggest.showDeprecated": false,
  // C# doc comment colorization gets lost with semantic highlighting, but we
  // need semantic highlighting for proper syntax highlighting with record
  // shorthand.
  //
  // Here's a workaround for doc comment highlighting from
  // https://github.com/OmniSharp/omnisharp-vscode/issues/3816
  "editor.tokenColorCustomizations": {
    "[*]": {
      // Themes that don't include the word "Dark" or "Light" in them.
      // These are some bold colors that show up well against most dark and
      // light themes.
      //
      // Change them to something that goes well with your preferred theme :)
      "textMateRules": [
        {
          "scope": "comment.documentation",
          "settings": {
            "foreground": "#0091ff"
          }
        },
        {
          "scope": "comment.documentation.attribute",
          "settings": {
            "foreground": "#8480ff"
          }
        },
        {
          "scope": "comment.documentation.cdata",
          "settings": {
            "foreground": "#0091ff"
          }
        },
        {
          "scope": "comment.documentation.delimiter",
          "settings": {
            "foreground": "#aa00ff"
          }
        },
        {
          "scope": "comment.documentation.name",
          "settings": {
            "foreground": "#ef0074"
          }
        }
      ]
    },
    "[*Dark*]": {
      // Themes that include the word "Dark" in them.
      "textMateRules": [
        {
          "scope": "comment.documentation",
          "settings": {
            "foreground": "#608B4E"
          }
        },
        {
          "scope": "comment.documentation.attribute",
          "settings": {
            "foreground": "#C8C8C8"
          }
        },
        {
          "scope": "comment.documentation.cdata",
          "settings": {
            "foreground": "#E9D585"
          }
        },
        {
          "scope": "comment.documentation.delimiter",
          "settings": {
            "foreground": "#808080"
          }
        },
        {
          "scope": "comment.documentation.name",
          "settings": {
            "foreground": "#569CD6"
          }
        }
      ]
    },
    "[*Light*]": {
      // Themes that include the word "Light" in them.
      "textMateRules": [
        {
          "scope": "comment.documentation",
          "settings": {
            "foreground": "#008000"
          }
        },
        {
          "scope": "comment.documentation.attribute",
          "settings": {
            "foreground": "#282828"
          }
        },
        {
          "scope": "comment.documentation.cdata",
          "settings": {
            "foreground": "#808080"
          }
        },
        {
          "scope": "comment.documentation.delimiter",
          "settings": {
            "foreground": "#808080"
          }
        },
        {
          "scope": "comment.documentation.name",
          "settings": {
            "foreground": "#808080"
          }
        }
      ]
    }
  },
  "editor.wordBasedSuggestions": "off",
  "explorer.fileNesting.enabled": true,
  "explorer.fileNesting.expand": false,
  "explorer.fileNesting.patterns": {
    "*": "$(capture).import, $(capture).uid"
  },
  "files.exclude": {},
  "files.readonlyInclude": {
    "**/*.{godot,uid,import,tres,res,tscn}": true,
    "**/nuget/**": true,
    "addons/**/*": true
  },
  "files.watcherExclude": {
    "**/.git/objects/**": true,
    "**/.git/subtree-cache/**": true,
    "**/.godot/**": true
  },
  "github.copilot.chat.codeGeneration.instructions": [
    {
      "text": "C# 12, Godot 4.4.1"
    },
    {
      "text": "Use best practices."
    }
  ],
  "markdownlint.config": {
    // Allow non-unique heading names so we don't break the changelog.
    "MD024": false,
    // Allow html in markdown.
    "MD033": false
  },
  "markdownlint.ignore": [
    "**/LICENSE"
  ],
  "omnisharp.enableEditorConfigSupport": true,
  "omnisharp.enableMsBuildLoadProjectsOnDemand": false,
  "omnisharp.maxFindSymbolsItems": 3000,
  "omnisharp.useModernNet": true,
}
